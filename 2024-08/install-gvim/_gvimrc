" vim: syntax=vim

" vimhelp.org/options.txt.html#%27colorcolumn%27
let &colorcolumn = 82

" vimhelp.org/options.txt.html#%27softtabstop%27
let &softtabstop = 3

" vimhelp.org/options.txt.html#%27fileformats%27
let &fileformats = 'unix'

" vimhelp.org/options.txt.html#%27columns%27
let &columns = 84

" vimhelp.org/options.txt.html#%27clipboard%27
let &clipboard = 'unnamed'

" vimhelp.org/options.txt.html#%27background%27
let &background = 'light'

" vimhelp.org/options.txt.html#%27wrapscan%27
let &wrapscan = 0

" Normal mode undo find highlight
nmap H :nohlsearch<CR>

" Insert mode Enter key
imap <CR> <C-R>=Enter()<CR>

" disable default auto indent
filetype indent off

" disable default tab stop
filetype plugin off

" Insert mode smart Home
imap <Home> <C-O>:call Home()<CR>

" Normal mode smart Home
nmap <Home> :call Home()<CR>

" Change directory for SWP files
let &directory = $TMP

" vimhelp.org/options.txt.html#%27encoding%27
let &encoding = 'UTF-8'

" use spaces
let &expandtab = 1

" Increase font size
let &guifont = 'Consolas:h12'

" Keep scroll, disable others
let &guioptions = 'r'

" Highlight matches
let &hlsearch = 1

" github.com/vim/vim/issues/9001
let &ignorecase = 1

" break on words when wrap is enabled
let &linebreak = 1

" Line numbers
let &number = 1

" visual mode
let &shiftwidth = 3

" all lower: loose, any upper: strict
let &smartcase = 1

" long lines
let &synmaxcol = 999

" fix 'col' value at end of line
let &virtualedit = 'onemore'

" disable line wrap
let &wrap = 0

" fix highlighting
let g:markdown_minlines = 999

func Tab()
   " vimhelp.org/options.txt.html#%27expandtab%27  
   let &expandtab = 0
   " vimhelp.org/options.txt.html#%27shiftwidth%27
   let &shiftwidth = 8
   " vimhelp.org/options.txt.html#%27softtabstop%27
   let &softtabstop = 0
endfunc

func Cursor()
   if &expandtab
      let nCursor = col('.') - 1
   else
      let nCursor = col('.') * &shiftwidth
   endif
   let nIndent = indent(line('.'))
   return [nCursor, nIndent]
endfunc

func Enter()
   let min_cur = min(Cursor())
   return "\n" . repeat("\t", min_cur / &shiftwidth)
endfunc

func Home()
   let [cur, nIndent] = Cursor()
   if cur > nIndent
      normal ^
   else
      normal 0
   endif
endfunc

colorscheme PaperColor
